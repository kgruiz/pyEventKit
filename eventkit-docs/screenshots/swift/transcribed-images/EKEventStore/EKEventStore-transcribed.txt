\documentclass{article}

\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{tikz}
\usepackage{xcolor}
\usepackage{array}
\usepackage{enumitem}
\usepackage{tabularx}

\begin{document}

\section*{EKEventStore}

\textit{Class}

\textbf{EKEventStore}

An object that accesses a person's calendar events and reminders and supports the scheduling of new events.

IOS 4.0+ | iPadOS 4.0+ | Mac Catalyst 13.1+ | macOS 10.8+ | visionOS 1.0+ | watchOS 2.0+

\texttt{class EKEventStore}

\section*{Mentioned in}

\begin{itemize}
    \item Retrieving events and reminders
    \item Accessing the event store
    \item Creating events and reminders
\end{itemize}

\section*{Overview}

The \texttt{EKEventStore} class is an app's point of contact for accessing calendar and reminder data.

After initializing the event store, you must request access to events or reminders before attempting to fetch or create data. To request access to reminders, call \texttt{requestFullAccessToReminders(completion:)}. To request access to events, call \texttt{requestWriteOnlyAccessToEvents(completion:)} or \texttt{requestFullAccessToEvents(completion:)}.

\textbf{Important}

To request access to events and reminders, your app needs to include permission strings in its Info.plist file that explain to someone why the app needs access. For more information, see Accessing the event store.

A typical workflow for using an event store is:

\begin{enumerate}
    \item Create a predicate, or a search query for events, with \texttt{predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?)}.
    \item Fetch and process events that match the predicate with the \texttt{events(matching:)} and \texttt{enumerateEvents(matching: using:)} methods.
    \item Save and delete events from the event store with the \texttt{save(EKEvent, span: EKSpan, commit: Bool)} and \texttt{remove(EKEvent, span: EKSpan)} methods.
\end{enumerate}

Use similar methods to access and manipulate reminders.

After receiving an object from an event store, don't use that object with a different event store. This restriction applies to \texttt{EKObject} subclasses such as \texttt{EKEvent}, \texttt{EKReminder}, \texttt{EKCalendar}, and \texttt{EKSource}, as well as predicates that the event store creates. For example, don't fetch an event from one event store, modify the event, and then pass it to \texttt{save(\_ :span:) } in a different store.

\section*{Topics}

\subsection*{Creating event stores}

\begin{itemize}
    \item \texttt{init()}
    Creates a new event store.

    \item \texttt{init(sources: [EKSource])}
    Creates an event store that contains data for the specified sources.

    \item \texttt{var eventStoreIdentifier: String}
    The unique identifier for the event store.
\end{itemize}

\subsection*{Requesting access to events and reminders}

\begin{itemize}
    \item \texttt{func requestWriteOnlyAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)}
    Prompts the person using your app to grant or deny write access to event data.

    \item \texttt{func requestFullAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)}
    Prompts people to grant or deny read and write access to event data.

    \item \texttt{func requestFullAccessToReminders(completion: EKEventStoreRequestAccessCompletionHandler)}
    Prompts people to grant or deny read and write access to reminders.

    \item \texttt{class func authorizationStatus(for: EKEntityType) -> EKAuthorizationStatus}
    Determines the authorization status for the given entity type.

    \item \texttt{enum EKAuthorizationStatus}
    The current authorization status for a specific entity type.

    \item \texttt{typealias EKEventStoreRequestAccessCompletionHandler}
    The signature for a closure that EventKit calls when requesting access to event and reminder data.

    \item \texttt{NSCalendarsFullAccessUsageDescription}
    A message that tells people why the app is requesting access to read and write their calendar data.

    \item \texttt{NSCalendarsWriteOnlyAccessUsageDescription}
    A message that tells people why the app is requesting access to create calendar events.

    \item \texttt{NSRemindersFullAccessUsageDescription}
    A message that tells people why the app is requesting access to read and write their reminders data.
\end{itemize}

\subsection*{Accessing account sources}

\begin{itemize}
    \item \texttt{var sources: [EKSource]}
    An unordered array of objects that represent accounts that contain calendars.

    \item \texttt{var delegateSources: [EKSource]}
    The event sources delegated to the person using your app.

    \item \texttt{func source(withIdentifier: String) -> EKSource?}
    Locates an event source with the specified identifier.
\end{itemize}

\subsection*{Saving and restoring state}

\begin{itemize}
    \item \texttt{func commit() throws}
    Commits all unsaved changes to the event store.

    \item \texttt{func reset()}
    Reverts the event store to its saved state.

    \item \texttt{func refreshSourcesIfNeeded()}
    Pulls new data from remote sources, if necessary.
\end{itemize}

\subsection*{Accessing calendars}

\begin{itemize}
    \item \texttt{var defaultCalendarForNewEvents: EKCalendar?}
    The calendar that events are added to by default, as specified by user settings.

    \item \texttt{func defaultCalendarForNewReminders() -> EKCalendar?}
    Identifies the default calendar for adding reminders to, as specified by user settings.

    \item \texttt{func calendars(for: EKEntityType) -> [EKCalendar]}
    Identifies the calendars that support a given entity type, such as reminders or events.

    \item \texttt{func calendar(withIdentifier: String) -> EKCalendar?}
    Locates a calendar with the specified identifier.

    \item \texttt{func saveCalendar(EKCalendar, commit: Bool) throws}
    Saves a calendar to the event store by either committing or batching the changes.

    \item \texttt{func removeCalendar(EKCalendar, commit: Bool) throws}
    Removes a calendar from the event store by either committing or batching the changes.

    \item \texttt{var calendars: [EKCalendar]} \textit{Deprecated}
    The calendars associated with the event store.
\end{itemize}

\subsection*{Accessing calendar events}

\begin{itemize}
    \item \texttt{func event(withIdentifier: String) -> EKEvent?}
    Locates the first occurrence of an event with a given identifier.

    \item \texttt{func calendarItem(withIdentifier: String) -> EKCalendarItem?}
    Locates a reminder or the first occurrence of an event with the specified identifier.

    \item \texttt{func calendarItems(withExternalIdentifier: String) -> [EKCalendarItem]}
    Locates all reminders or the first occurrences of all events with the specified external identifier.

    \item \texttt{func remove(EKEvent, span: EKSpan) throws}
    Removes an event from the event store.

    \item \texttt{func remove(EKEvent, span: EKSpan, commit: Bool) throws}
    Removes an event or recurring events from the event store by either committing or batching the changes.

    \item \texttt{func remove(EKReminder, commit: Bool) throws}
    Removes a reminder from the event store by either committing or batching the changes.

    \item \texttt{func save(EKEvent, span: EKSpan) throws}
    Saves changes to an event permanently.

    \item \texttt{func save(EKEvent, span: EKSpan, commit: Bool) throws}
    Saves an event or recurring events to the event store by either committing or batching the changes.

    \item \texttt{func save(EKReminder, commit: Bool) throws}
    Saves changes to a reminder by either committing or batching the changes.
\end{itemize}

\subsection*{Searching calendars}

\begin{itemize}
    \item \texttt{func enumerateEvents(matching: NSPredicate, using: EKEventSearchCallback)}
    Finds all events that match a given predicate and calls a given callback for each event found.

    \item \texttt{func events(matching: NSPredicate) -> [EKEvent]}
    Finds all events that match a given predicate.

    \item \texttt{func fetchReminders(matching: NSPredicate, completion: ([EKReminder]?) -> Void)}
    Fetches reminders that match a given predicate.

    \item \texttt{func cancelFetchRequest(Any)}
    Cancels the request to fetch reminders.

    \item \texttt{func predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?) -> NSPredicate}
    Creates a predicate to identify events that occur within a given date range.

    \item \texttt{func predicateForReminders(in: [EKCalendar]?) -> NSPredicate}
    Creates a predicate to identify all reminders in a collection of calendars.

    \item \texttt{func predicateForCompletedReminders(withCompletionDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate}
    Creates a predicate to identify all completed reminders that occur within a given date range.

    \item \texttt{func predicateForIncompleteReminders(withDueDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate}
    Creates a predicate to identify all incomplete reminders that occur within a given date range.

    \item \texttt{typealias EKEventSearchCallback}
    The signature for a closure that operates on events when enumerating them.
\end{itemize}

\subsection*{Deprecated methods}

\begin{itemize}
    \item \texttt{func requestAccess(to: EKEntityType, completion: EKEventStoreRequestAccessCompletionHandler)} \textit{Deprecated}
    Prompts the person using your app to grant or deny access to event or reminder data.
\end{itemize}

\section*{Relationships}

\subsection*{Inherits From}

\begin{itemize}
    \item NSObject
\end{itemize}

\subsection*{Conforms To}

\begin{itemize}
    \item CVarArg
    \item CustomDebugStringConvertible
    \item CustomStringConvertible
    \item Equatable
    \item Hashable
    \item NSObjectProtocol
\end{itemize}

\section*{See Also}

\subsection*{Essentials}

\begin{itemize}
    \item Accessing the event store
    Request access to a person's calendar data through the event store.

    \item Accessing Calendar using EventKit and EventKitUI
    Choose and implement the appropriate Calendar access level in your app.
\end{itemize}

\end{document}
