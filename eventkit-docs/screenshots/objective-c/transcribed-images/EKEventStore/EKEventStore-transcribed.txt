\documentclass{article}

\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{tikz}
\usepackage{xcolor}
\usepackage{array}
\usepackage{enumitem}
\usepackage{tabularx}

\begin{document}

EventKit / EKEventStore

Class

\textbf{EKEventStore}

An object that accesses a person's calendar events and reminders and supports the scheduling of new events.

iOS 4.0+ | iPadOS 4.0+ | Mac Catalyst 13.1+ | macOS 10.8+ | visionOS 1.0+ | watchOS 2.0+

@interface EKEventStore : NSObject

Mentioned in

\href{}{}Retrieving events and reminders

\href{}{}Accessing the event store

\href{}{}Creating events and reminders

Overview

The EKEventStore class is an app's point of contact for accessing calendar and reminder data.

After initializing the event store, you must request access to events or reminders before attempting to fetch or create data. To request access to reminders, call \textit{requestFullAccessToRemindersWithCompletion:}. To request access to events, call \textit{requestWriteOnlyAccessToEventsWithCompletion:} or \textit{requestFullAccessToEventsWithCompletion:}.

\textbf{Important}

To request access to events and reminders, your app needs to include permission strings in its Info.plist file that explain to someone why the app needs access. For more information, see \href{}{}Accessing the event store

A typical workflow for using an event store is:

\begin{enumerate}
    \item Create a predicate, or a search query for events, with \textit{predicateForEventsWithStartDate:endDate:calendars:}.
    \item Fetch and process events that match the predicate with the \textit{eventsMatchingPredicate:} and \textit{enumerateEventsMatchingPredicate:usingBlock:} methods.
    \item Save and delete events from the event store with the \textit{saveEvent:span:commit:error:} and \textit{removeEvent:span:commit:error:} methods.
\end{enumerate}

Use similar methods to access and manipulate reminders.

After receiving an object from an event store, don't use that object with a different event store. This restriction applies to \textit{EKObject} subclasses such as \textit{EKEvent, EKReminder, EKCalendar,} and \textit{EKSource}, as well as predicates that the event store creates. For example, don't fetch an event from one event store, modify the event, and then pass it to \textit{saveEvent:span:error:} in a different store.

Topics

Creating event stores

\textminus init

Creates a new event store.

\textminus initWithSources:

Creates an event store that contains data for the specified sources.

@property(readonly, nonatomic) NSString \*eventStoreIdentifier

The unique identifier for the event store.

\textminus initWithAccessToEntityTypes:

Initializes access to the event store with support for the given entity type.

Deprecated

Requesting access to events and reminders

\textminus requestWriteOnlyAccessToEventsWithCompletion:

Prompts the person using your app to grant or deny write access to event data.

\textminus requestFullAccessToEventsWithCompletion:

Prompts people to grant or deny read and write access to event data.

\textminus requestFullAccessToRemindersWithCompletion:

Prompts people to grant or deny read and write access to reminders.

\text{+} authorizationStatusForEntityType:

Determines the authorization status for the given entity type.

typedef void(^EKEventStoreRequestAccessCompletionHandler)(bool granted, NSError*error);

The signature for a closure that EventKit calls when requesting access to event and reminder data.

NSCalendarsFullAccessUsageDescription

A message that tells people why the app is requesting access to read and write their calendar data.

NSCalendarsWriteOnlyAccessUsageDescription

A message that tells people why the app is requesting access to create calendar events.

NSRemindersFullAccessUsageDescription

A message that tells people why the app is requesting access to read and write their reminders data.

Accessing account sources

@property(readonly, nonatomic) NSArray \*sources

An unordered array of objects that represent accounts that contain calendars.

@property(nonatomic, weak) id <EKSourceDelegate> delegateSources

The event sources delegated to the person using your app.

\textminus sourceWithIdentifier:

Locates an event source with the specified identifier.

Saving and restoring state

\textminus commit:

Commits all unsaved changes to the event store.

\textminus reset

Reverts the event store to its saved state.

\textminus refreshSourcesIfNeeded

Pulls new data from remote sources, if necessary.

Accessing calendars

@property(nonatomic, readonly) EKCalendar *defaultCalendarForNewEvents

The calendar that events are added to by default, as specified by user settings.

@property(nonatomic, readonly) EKCalendar *defaultCalendarForNewReminders

Identifies the default calendar for adding reminders to, as specified by user settings.

\textminus calendarsForEntityType:

Identifies the calendars that support a given entity type, such as reminders or events.

\textminus calendarWithIdentifier:

Locates a calendar with the specified identifier.

\textminus saveCalendar:commit:error:

Saves a calendar to the event store by either committing or batching the changes.

\textminus removeCalendar:commit:error:

Removes a calendar from the event store by either committing or batching the changes.

@property(nonatomic, readonly) NSArray *calendars

The calendars associated with the event store.

Deprecated

Accessing calendar events

\textminus eventWithIdentifier:

Locates the first occurrence of an event with a given identifier.

\textminus calendarItemWithIdentifier:

Locates a reminder or the first occurrence of an event with the specified identifier.

\textminus calendarItemsWithExternalIdentifier:

Locates all reminders or the first occurrences of all events with the specified external identifier.

Removing calendar events

\textminus removeEvent:span:error:

Removes an event from the event store.

\textminus removeEvent:span:commit:error:

Removes an event or recurring events from the event store by either committing or batching the changes.

\textminus removeReminder:commit:error:

Removes a reminder from the event store by either committing or batching the changes.

Saving calendar events

\textminus saveEvent:span:error:

Saves changes to an event permanently.

\textminus saveEvent:span:commit:error:

Saves an event or recurring events to the event store by either committing or batching the changes.

\textminus saveReminder:commit:error:

Saves changes to a reminder by either committing or batching the changes.

Searching calendars

\textminus enumerateEventsMatchingPredicate:usingBlock:

Finds all events that match a given predicate and calls a given callback for each event found.

\textminus eventsMatchingPredicate:

Finds all events that match a given predicate.

\textminus fetchRemindersMatchingPredicate:completion:

Fetches reminders that match a given predicate.

\textminus cancelFetchRequest

Cancels the request to fetch reminders.

\textminus predicateForEventsWithStartDate:endDate:calendars:

Creates a predicate to identify events that occur within a given date range.

\textminus predicateForRemindersInCalendars:

Creates a predicate to identify all reminders in a collection of calendars.

\textminus predicateForCompleteRemindersWithCompletionDateStarting:ending:calendars:

Creates a predicate to identify all completed reminders that occur within a given date range.

\textminus predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:

Creates a predicate to identify all incomplete reminders that occur within a given date range

typedef void(^EKEventSearchCallback)(EKEvent *event, BOOL *stop);

The signature for a closure that operates on events when enumerating them.

Deprecated methods

\textminus requestAccessToEntityTypes:completion:

Prompts the person using your app to grant or deny access to event or reminder data.

Deprecated

Relationships

Inherits From

NSObject

See Also

Essentials

\href{}{}Accessing the event store

Request access to a person's calendar data through the event store.

\end{document}
